networks:
  lot-app-net:
    driver: bridge

services:
  app:
    build:
      context: ./lot-app
      # Передаем переменные из .env в качестве аргументов на этап сборки
      args:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - NEXT_PUBLIC_CSHARP_BACKEND_URL=${NEXT_PUBLIC_CSHARP_BACKEND_URL}
        - NEXT_PUBLIC_FEATURE_PUBLISH_BUTTON_ENABLED=${NEXT_PUBLIC_FEATURE_PUBLISH_BUTTON_ENABLED}
        - NEXT_PUBLIC_YANDEX_MAPS_API_KEY=${NEXT_PUBLIC_YANDEX_MAPS_API_KEY}
    container_name: lot-app-container
    restart: unless-stopped
    ports:
      - "3000:3000"
    # Эта секция по-прежнему нужна для запущенного контейнера
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    networks:
      - lot-app-net

  postgres:
    image: postgres:16
    container_name: postgres-container
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      # Команда, которая проверяет, готова ли база принимать подключения
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - lot-app-net

  parser:
    build:
      context: ./parser
    container_name: lot-parser-container
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lot-app-net
    shm_size: 512m

volumes:
  pgdata:
